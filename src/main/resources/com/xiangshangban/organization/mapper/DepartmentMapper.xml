<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiangshangban.organization.dao.DepartmentDao">
 
  <resultMap  type="com.xiangshangban.organization.bean.Department" id="Department" > 
    <result  property="departmentId" jdbcType="VARCHAR" column="department_id" />
    <result  property="departmentNumbe" jdbcType="VARCHAR" column="department_numbe" />   
    <result  property="departmentName" jdbcType="VARCHAR"  column="department_name"/>
    <result column="department_describe" jdbcType="VARCHAR" property="departmentDescribe" />
    <result  property="employeeId" jdbcType="VARCHAR" column="employee_id"/>    
    <result  property="departmentPhone" jdbcType="VARCHAR" column="department_phone"/>
    <result  property="departmentFax" jdbcType="VARCHAR" column="department_fax"/>
    <result  property="departmentParentId" jdbcType="VARCHAR" column="department_parent_id"/>
    <result  property="departmentParentName" jdbcType="VARCHAR" column="department_parent_name"/>   
    <result  property="companyId" jdbcType="VARCHAR" column="company_id"/> 
    <result  property="companyName" jdbcType="VARCHAR" column="company_name"/>    
    <result  property="CountNumber" jdbcType="VARCHAR" column="Count_number"/>
    <result  property="employeeName" jdbcType="VARCHAR" column="employee_name"/>
 
    
 </resultMap>
  
  <sql id="Base_Column_List"> 
    department_id,department_numbe, department_name, department_describe, department_principal
  </sql>
  
	<!-- 分页查询部门信息-->
  <select id="findByAllFenyeDepartment" parameterType="java.util.Map" resultMap="Department">
    select 
	    d.department_id, d.department_numbe, d.department_name, d.department_describe,
	    d.department_parent_id,d.company_id, d.employee_id, 
		CASE d.department_parent_id WHEN '0' THEN c.company_name ELSE dp.department_name END AS department_parent_name,
		c.company_name, COALESCE(e.employee_name,'') AS employee_name
    from organization.department_  d  
		LEFT JOIN organization.department_  dp ON d.department_parent_id=dp.department_id
		LEFT JOIN organization.company_  c ON c.company_id=d.company_id
		LEFT JOIN organization.employee_ e ON e.employee_id=d.employee_id
    where	
	d.company_id=#{companyId} AND d.status='1'
	<if test="departmentId!=null and departmentId!=''">
		AND (d.department_id =#{departmentId} OR d.department_parent_id =#{departmentId})
	</if>
	<if test="companyName!=null and companyName!=''">
		AND company_name like '%${companyName}%'
	</if>
	<if test="departmentName!=null and departmentName!='' ">
		AND d.department_name like '%${departmentName}%'
	</if>
	<if test="employeeName!=null and employeeName!=''">
		AND employeeName like '%${employeeName}%'
	</if>
	order by d.department_name
	limit #{pageRecordNum}::integer offset #{fromPageNum}::integer 	 
  </select>
  <!-- 分页查询部门信息数目-->
  <select id="findDepartmentPageAllLength" parameterType="java.util.Map" resultType="Integer">
	  select count(d.department_id)
	   from organization.department_  d  
		LEFT JOIN organization.department_  dp ON d.department_parent_id=dp.department_id
		LEFT JOIN organization.company_  c ON c.company_id=d.company_id
		LEFT JOIN organization.employee_ e ON e.employee_id=d.employee_id  
	    where	
		d.company_id=#{companyId} AND d.status='1' 
		<if test="departmentId!=null and departmentId!=''">
			AND (d.department_id =#{departmentId} OR d.department_parent_id =#{departmentId})
		</if>
		<if test="companyName!=null and companyName!=''">
			AND company_name like '%${companyName}%'
		</if>
		<if test="departmentName!=null and departmentName!='' ">
			AND d.department_name like '%${departmentName}%'
		</if>
		<if test="employeeName!=null and employeeName!=''">
			AND employeeName like '%${employeeName}%'
		</if>
  </select>
  <select id="getDepartmentByName" resultType="int">
  	select count(*)
  	from organization.department_  d 
	where		
	department_name=#{departmentName}
	AND	d.company_id=#{companyId} AND status='1'
	<if test="departmentId!=null and departmentId!=''">
		AND d.department_Id!=#{departmentId}
	</if>
  </select>
	<select id="findDepartmentTree"  resultMap="Department">
	select d.department_id, d.department_numbe, d.department_name, d.department_describe,
	d.department_parent_id,d.company_id, d.employee_id,
	(select c.company_name from company_ c where c.company_id=d.company_id),
	(select e.employee_name from employee_ e where e.employee_id=d.employee_id)
    from organization.department_  d 
	where		
		department_parent_id=#{departmentParentId}
		AND	d.company_id=#{companyId}	AND d.status='1'
	order by d.department_name
	</select>
  
   <select id="findByMoreDepartment"   parameterType="java.util.Map" resultMap="Department">  
   select d.department_id, d.department_numbe, d.department_name, d.department_describe,d.department_parent_id,d.company_id, 
   d.employee_id,(select c.company_name from organization.company_ c  where c.company_id=d.company_id),
   (select e.employee_name from organization.employee_ e where e.employee_id=d.employee_id)
    from organization.department_  d      
    <where> 
     <if test="companyName!=null and companyName != ''">
       d.superior_organization_id in (select c.company_id from organization.company_ c  where c.company_name like '%${companyName}%')
     </if>
     <if test="departmentName != null and departmentName != ''">
		 and d.department_name like '%${departmentName}%'
	 </if>
     <if test="employeeName != null and employeeName != ''">
	     and d.employee_id in(select d.employee_id from organization.department_  d  LEFT JOIN organization.employee_ e on e.employee_id=d.employee_id where employee_name like '%${employeeName}%')
	 </if> 				 
     </where>
     order by d.department_name
  </select> 
    
  <!-- 查询所有部门 -->
  <select id="findByAllDepartment" parameterType="java.lang.String" resultMap="Department">
    select 
	    d.department_id, d.department_numbe, d.department_name, d.department_describe,
	    d.department_parent_id,d.company_id, d.employee_id,
	    (select c.company_name from organization.company_ c  where c.company_id=d.company_id),
	    (select e.employee_name from organization.employee_ e where e.employee_id=d.employee_id)
    from organization.department_  d  
    where d.company_id=#{companyId}	AND d.status='1' 
    order by d.department_parent_id
  </select>
  <!-- 查询部门下的所有子部门 -->
  <select id="findSingleAllDepartment" parameterType="java.lang.String" resultMap="Department">
    select d.department_id, d.department_numbe, d.department_name, d.department_describe,
    d.department_parent_id,d.company_id, d.employee_id,
    (select c.company_name from organization.company_ c  where c.company_id=d.company_id),
    (select e.employee_name from organization.employee_ e where e.employee_id=d.employee_id)
    from organization.department_  d  
    where d.department_parent_id = #{departmentId}
    AND	
	company_id=#{companyId} AND d.status='1'
	order by d.department_name
  </select>
  
  <!-- 查询单个部门 --> 
  <select id="selectByDepartment" parameterType="java.lang.String" resultMap="Department">
    select d.department_id, d.department_numbe, d.department_name, d.department_describe,
    d.department_parent_id,d.company_id, d.employee_id
    from organization.department_  d  
    where d.department_id = #{departmentId}
    AND	d.company_id=#{companyId}	
  </select>
  
  <select id="findByDepartmentNumber" parameterType="java.lang.String" resultMap="Department">
    select d.department_id, d.department_numbe, d.department_name, d.department_describe,d.department_parent_id,d.company_id,
     d.employee_id,(select c.company_name from company_ c  where c.company_id=d.company_id),
     COALESCE(e.employee_name,'') AS employee_name
    from organization.department_  d  
    left join organization.employee_ e ON e.employee_id=d.employee_id
    where 
    department_numbe = #{departmentNumbe}
  </select>
  <select id="findByDepartmentById" resultMap="Department">
  	select d.department_id, d.department_numbe, d.department_name, d.department_describe,d.department_parent_id,d.company_id, d.employee_id,(select c.company_name from company_ c  where c.company_id=d.company_id),(select e.employee_name from employee_ e where e.employee_id=d.employee_id)
    from organization.department_  d  
    where d.department_id=#{deptId} AND d.company_id=#{companyId}
  </select>  
  <update id="deleteByDepartment" parameterType="java.lang.String">
    update organization.department_ SET status='0' where department_id=#{departmentId}
  </update>
  
  
  <insert id="insertDepartment" parameterType="com.xiangshangban.organization.bean.Department">   
    insert into organization.department_ (department_id, department_numbe, department_name,department_describe, 
      employee_id,department_parent_id,company_id
      )
    values (
      #{departmentId},
      #{departmentNumbe},
      #{departmentName}, 
      #{departmentDescribe}, 
      #{employeeId},        
      #{departmentParentId},                     
      #{companyId} 
      )
  </insert>
 
 <select id="selectDepartmentCountByCompanyId" parameterType="java.lang.String" resultType="java.lang.Integer">
 	select count(department_id) 
 	from department_ 
 	where company_id = #{companyId}
 </select>

  <update id="updateByDepartment" parameterType="com.xiangshangban.organization.bean.Department">  
    update organization.department_
    set        
      department_name = #{departmentName},
      department_describe = #{departmentDescribe},
      employee_id = #{employeeId},
      department_parent_id=#{departmentParentId}             
    where 
    department_id = #{departmentId}
  </update>
  
  <select id="selectDepatmentByDepartmentNameAndCompanyId" parameterType="java.lang.String" resultMap="Department">
  	select department_id,department_name
  	from department_
  	where company_id = #{companyId} and department_name = #{departmentName} and status = '1'
  </select>
  
</mapper>